@model osVodigiWeb6x.Models.Screen

@{
    ViewBag.Title = "Edit";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script type="text/javascript">
    $(function () {
        $("input:text:visible:first").focus();
    });
    function ShowPreview() {
        var path = $("#txtImageFolder").val();
        var newfile = $("#lstButtonImage option:selected").val();
        $("#imgPreview").attr("src", path + newfile);
    }
    function ClearPlayListSelection() {
        var selectedIndex = $('#lstPlayList').attr('selectedIndex');
        if (selectedIndex > 0) {
            $("#lstPlayList").attr('selectedIndex', '0');
        }
    }
    function ClearSlideShowSelection() {
        var selectedIndex = $('#lstSlideShow').attr('selectedIndex');
        if (selectedIndex > 0) {
            $("#lstSlideShow").attr('selectedIndex', '0');
        }
    }
    function AddToScreen() {
        var contenttext = $("#lstScreenContent option:selected").text();
        var contentid = $("#lstScreenContent option:selected").val();
        var option = new Option(contenttext, contentid, false, false);
        $('#lstScreenScreenContent').append(option);
        PopulateContentStore();
    }
    function RemoveFromScreen() {
        $("#lstScreenScreenContent option:selected").remove();
        PopulateContentStore();
    }
    function MoveItemUp() {
        $('#lstScreenScreenContent option:selected').each(function () {
            $(this).insertBefore($(this).prev());
        });
        PopulateContentStore();
    }
    function MoveItemDown() {
        $('#lstScreenScreenContent option:selected').each(function () {
            $(this).insertAfter($(this).next());
        });
        PopulateContentStore();
    }
    function PopulateContentStore() {
        var content = '';
        $('#lstScreenScreenContent > option').each(function () {
            content += '|' + this.value;
        });
        $('#txtScreenScreenContent').attr("value", content);
    }
</script>

<br />
<div class="textblock">
    <table class="instructions">
        <tr>
            <td style="width:100px;"><img src="~/Images/screen-icon.png" alt="" style="border-radius:8px 8px;" /></td>
            <td>
                <span class="paragraphheader">Edit Screen</span><br />
                <span class="paragraphtext">Please update the appropriate information below. Select a Slide Show or Play List, but not both.</span>
            </td>
        </tr>
    </table>
</div>
<br />
@using (Html.BeginForm()) {

    <table class="formtable" style="border-spacing:0;border-collapse:collapse;" role="presentation">
        <tr>
            <td class="formheader" colspan="2">Edit Screen</td>
        </tr>
        <tr>
            <td class="formprimary"><b>Screen Name: <span class="required">*</span></b></td>
            <td class="formprimary">
                @Html.TextBoxFor(model => model.ScreenName, new { @style = "width:300px;", maxlength = 128 })
            </td>
        </tr>
        <tr>
            <td class="formsecondary"><b>Description: </b></td>
            <td class="formsecondary">
                @Html.TextBoxFor(model => model.ScreenDescription, new { @style = "width:300px;", maxlength = 1024 })
            </td>
        </tr>
        <tr>
            <td class="formprimary"><b>Slide Show:</b></td>
            <td class="formprimary">
                @Html.DropDownList("lstSlideShow", (SelectList)ViewData["SlideShowList"], new { @style = "width:300px;", onchange = @"ClearPlayListSelection();" })
            </td>
        </tr>
        <tr>
            <td class="formsecondary"><b>Play List:</b></td>
            <td class="formsecondary">
                @Html.DropDownList("lstPlayList", (SelectList)ViewData["PlayListList"], new { @style = "width:300px;", onchange = @"ClearSlideShowSelection();" })
            </td>
        </tr>
        <tr>
            <td class="formprimary"><b>Interactive: </b></td>
            <td class="formprimary">
                @Html.EditorFor(model => model.IsInteractive)
            </td>
        </tr>
        <tr>
            <td class="formsecondary" style="vertical-align:top;"><b>Interactive Button Image:</b></td>
            <td class="formsecondary">
                @Html.DropDownList("lstButtonImage", (SelectList)ViewData["ImageList"], new { @style = "width:300px;", onchange = @"ShowPreview();" })<br />
                <img id="imgPreview" alt="" src='@Url.Content((string)ViewData["ImageURL"])' class="interactivebuttonpreview" />
            </td>
        </tr>
        <tr>
            <td class="formprimary"><b>Active: </b></td>
            <td class="formprimary">
                @Html.EditorFor(model => model.IsActive)
            </td>
        </tr>
        <tr>
            <td class="formsecondary" style="vertical-align: top;height:250px;">
                <b>Available Screen Content</b><br />
                @Html.DropDownList("lstScreenContent", (SelectList)ViewData["ScreenContentList"], new { @style = "width:320px;", size = 15 })
                <span class="addcontenttoscreen" onclick="AddToScreen();">Add-></span>
            </td>
            <td class="formsecondary" style="vertical-align: top;height:250px;">
                <b>Assigned Content</b>
                <span class="modifyscreenscreencontentlist" onclick="RemoveFromScreen();" style="margin-left: 30px;">Remove</span>
                <span class="modifyscreenscreencontentlist" onclick="MoveItemUp();">Move Up</span>
                <span class="modifyscreenscreencontentlist" onclick="MoveItemDown();">Move Down</span>
                <br />
                @Html.DropDownList("lstScreenScreenContent", (SelectList)ViewData["ScreenScreenContentList"], new { @style = "width:320px;", size = 15 })
            </td>
        </tr>
        <tr>
            <td class="formfooter" colspan="2"><div id="returnlink"><input type="submit" value="Save" style="width:75px;" />@Html.ActionLink("Back to List", "Index")</div></td>
        </tr>
    </table>
    <div class="formfootnote"><span class="required">*</span> indicates a required field.</div>
    <br />
    <div class="errormessage">@Html.Raw((string)ViewData["ValidationMessage"])</div>
    @Html.Hidden("txtImageFolder", ViewData["ImageFolder"])
    @Html.HiddenFor(model => model.ScreenID)
    @Html.HiddenFor(model => model.AccountID)
    @Html.Hidden("txtScreenScreenContent", ViewData["ScreenScreenContent"])
}

<br /><br />
